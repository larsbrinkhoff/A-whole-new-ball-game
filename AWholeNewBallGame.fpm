" bmp.fpm" L

" kernel32.dll" LOADLIBRARY
DUP  " Sleep" GETPROCADDRESS CONSTANT SLEEP
     " GetTickCount" GETPROCADDRESS CONSTANT GetTickCount

VARIABLE RND

: RANDOMIZE GetTickCount RND ! ;
RANDOMIZE

: SGN \ ( u -- -1 | 0 | 1 )
DUP 0 = IF ELSE
DUP 0 MAX 0 = IF DROP -1 ELSE
DROP 1 THEN THEN ;

: NEGATE \ ( x -- -x )
0 SWAP - ;

: ABS \ ( x -- u )
DUP SGN -1 = IF NEGATE THEN ;


: RANDOM \  ( -- u )
RND @ 69069 * 31415 + 278720333 MOD DUP RND ! ;

: CHOOSE  \ ( u1 -- u2 )
   278720333 SWAP /
   RANDOM ABS SWAP /
;

50 CONSTANT FieldOffsetX
50 CONSTANT FieldOffsetY

30 CONSTANT FieldWidth
18 CONSTANT FieldHeight

16 CONSTANT SpriteWidth
16 CONSTANT SpriteHeight

FieldWidth FieldHeight * CONSTANT FieldSize

FieldWidth SpriteWidth * CONSTANT FieldPixelWidth
FieldHeight SpriteHeight * CONSTANT FieldPixelHeight

CREATE GameField[] FieldSize ALLOT
0 GameField[] FieldSize CFILL

VARIABLE BallX
VARIABLE BallY
VARIABLE BallDX
VARIABLE BallDY
VARIABLE BallSpeed

VARIABLE NewBallX
VARIABLE NewBallY

VARIABLE BallTileX
VARIABLE BallTileY
VARIABLE NewBallTileX
VARIABLE NewBallTileY

VARIABLE JumpsCount

VARIABLE EnergyLeft

0 CONSTANT TileSpace // A
1 CONSTANT TileLeftSlashRemovable // B
2 CONSTANT TileRightSlashRemovable // C
3 CONSTANT TileLeftSlash // D
4 CONSTANT TileRightSlash // E
5 CONSTANT TileGoBack // F
6 CONSTANT TileGoRight // G
7 CONSTANT TileGoDown // H
8 CONSTANT TileGoLeft // I
9 CONSTANT TileGoUp // J
10 CONSTANT TileSpaceBlocked // K
11 CONSTANT TileSlime // L
12 CONSTANT TileGoRandom // M
13 CONSTANT TileJump // N
14 CONSTANT TileSpeedUp // O
15 CONSTANT TileSlowDown // P
16 CONSTANT TileGrass // Q
17 CONSTANT TileEnergy // R
18 CONSTANT TileTrap // S
19 CONSTANT TileWall // T
20 CONSTANT TileEraser // U
21 CONSTANT TileLevelStart // V
22 CONSTANT TilesCount

: TileIndex // x y -> x+y*width
 FieldWidth * + 
;

: SetTile // tileType x y -->
 TileIndex GameField[] + C!
;

: GetTile // x y --> tileType
 OVER FieldWidth U<
 OVER FieldHeight U< AND IF
  TileIndex GameField[] + C@
 ELSE
  DROP DROP TileWall
 THEN
;

CREATE Sprites[] TilesCount CELLS ALLOT
: Sprite, // index --> index+1
 LOAD-BMP OVER 4 * Sprites[] + ! 1+
;
: StartSpriteLoading 0 ;
: EndSpriteLoading DROP ;

StartSpriteLoading
 " bmp/TileSpace.bmp" Sprite,
 " bmp/TileLeftSlashRemovable.bmp" Sprite,
 " bmp/TileRightSlashRemovable.bmp" Sprite,
 " bmp/TileLeftSlash.bmp" Sprite,
 " bmp/TileRightSlash.bmp" Sprite,
 " bmp/TileGoBack.bmp" Sprite,
 " bmp/TileGoRight.bmp" Sprite,
 " bmp/TileGoDown.bmp" Sprite,
 " bmp/TileGoLeft.bmp" Sprite,
 " bmp/TileGoUp.bmp" Sprite,
 " bmp/TileSpaceBlocked.bmp" Sprite,
 " bmp/TileSlime.bmp" Sprite,
 " bmp/TileGoRandom.bmp" Sprite,
 " bmp/TileJump.bmp" Sprite,
 " bmp/TileSpeedUp.bmp" Sprite,
 " bmp/TileSlowDown.bmp" Sprite,
 " bmp/TileGrass.bmp" Sprite,
 " bmp/TileEnergy.bmp" Sprite,
 " bmp/TileTrap.bmp" Sprite,
 " bmp/TileWall.bmp" Sprite,
 " bmp/TileEraser.bmp" Sprite,
 " bmp/TileLevelStart.bmp" Sprite,
EndSpriteLoading

: DrawSprite // x y tileType -->
 Sprites[] SWAP -TH @ 
 ROT ROT // addr x y
 SHOW-BMP
;

: EXIT RDROP ;

: DrawTile // x y -->
 OVER FieldWidth U< 
 OVER FieldHeight U< AND IF
  OVER OVER GetTile Sprites[] SWAP -TH @ // x y SpriteAddr
  ROT SpriteWidth * FieldOffsetX +
  ROT SpriteHeight * FieldOffsetY +
  SHOW-BMP
 ELSE
  DROP DROP
 THEN
;

: DrawBorder
 FieldOffsetX 2 - FieldOffsetY 2 - FieldWidth SpriteWidth * 4 + WHITE HLINE
 FieldOffsetX 1 - FieldOffsetY 1 - FieldWidth SpriteWidth * 2 + WHITE HLINE

 FieldOffsetX 2 - FieldHeight SpriteHeight * FieldOffsetY + 1 + FieldWidth SpriteWidth * 4 + WHITE HLINE
 FieldOffsetX 1 - FieldHeight SpriteHeight * FieldOffsetY +     FieldWidth SpriteWidth * 2 + WHITE HLINE

 FieldOffsetX 2 - FieldOffsetY 2 - FieldHeight SpriteHeight * 4 + WHITE VLINE
 FieldOffsetX 1 - FieldOffsetY 1 - FieldHeight SpriteHeight * 2 + WHITE VLINE

 FieldWidth SpriteWidth * FieldOffsetX + 1 + FieldOffsetY 2 - FieldHeight SpriteHeight * 4 + WHITE VLINE
 FieldWidth SpriteWidth * FieldOffsetX +     FieldOffsetY 1 - FieldHeight SpriteHeight * 2 + WHITE VLINE
;

: DrawField
 FieldHeight 0 DO
  FieldWidth 0 DO
   I J DrawTile
  LOOP
 LOOP
 FieldOffsetX FieldOffsetY TileLevelStart DrawSprite
;

: DrawBall
 FieldOffsetX BallX @ + FieldOffsetY BallY @ +
 4 0 DO
  OVER OVER I + 4 WHITE HLINE
 LOOP
 DROP DROP
;

: DrawGameField
 DrawBorder
 DrawField
 DrawBall
;

: StartFillingGameField 0 EnergyLeft ! GameField[] ;
: EndFillingGameField DROP ;
: Field, // index str --> index+fieldWidth
 DUP IF // not empty string
  OVER // index str index
  BEGIN
   OVER C@ " A" C@ - // index str index tile
   DUP TileEnergy = IF EnergyLeft @ 1+ EnergyLeft ! THEN
   DUP TileJump = IF JumpsCount @ 1+ JumpsCount ! THEN
   OVER C!
   1+ SWAP 1+ SWAP
  OVER C@ NOT UNTIL
  DROP
 THEN
 DROP
 FieldWidth +
;

: LevelA
 StartFillingGameField
 " AAAAAAAAAAAAAABAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAATATAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAATTTTTTTTTRTTTTTTTTTAAAAAA" Field,
 " CAAAAARRRRRRRRRRRRRRRRRAAAAAAA" Field,
 " AAAAATTTTTTTTTRTTTTTTTTTAAAAAA" Field,
 " AAAAAAAAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAATATAAAAAAAAAAAAAA" Field,
 " BAAAAAAAAAAAAACAAAAAAAAAAAAAAA" Field,
 EndFillingGameField
;

: LevelTest
 StartFillingGameField
 " AOOKKBAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAPAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAHAPCAEBAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAGAPAACAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAADAAHAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAHAAIAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAGAAFAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 EndFillingGameField
;

: LevelTestRandom
 StartFillingGameField
 " AAHAATAAAAAAAAAAAAAAAAAATAAAAA" Field,
 " AAAAATAAAAAAAAAAAAAAAAAATAAAAA" Field,
 " AANAATAAAAAAAAAAAAAAAAAATAANAA" Field,
 " AAAAATAAAAAAAAAAAAAAAAAATAAAAA" Field,
 " AAAAATAAAAAAAAAAAAAAAAAATAAAAA" Field,
 " TTTTTTAAAAAAAAAAAAAAAAAATTTTTT" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " TTTTTTAAAAAAAAAAAAAAAAAATTTTTT" Field,
 " AAAAATAAAAAAAAAAAAAAAAAATAAAAA" Field,
 " AAAAATAAAAAAAAAAAAAAAAAATAAAAA" Field,
 " AANAATAAAAAAAAAAAAAAAAAATAANAA" Field,
 " AAAAATAAAAAAAAAAAAAAAAAATAAAAA" Field,
 " AAAAATAAAAAAAAAAAAAAAAAATAAAAA" Field,
 EndFillingGameField
;

: LevelTestRandom2
 StartFillingGameField
 FieldHeight 0 DO
  FieldWidth 0 DO
   I J + 2 MOD IF TileEnergy EnergyLeft @ 1+ EnergyLeft ! ELSE TileGoRandom THEN
   GameField[] IJ + C!
  LOOP
 LOOP
 EndFillingGameField
;

: SetBallPos // x y -->
 DUP BallY !
 SHR SHR SHR SHR BallTileY !

 DUP BallX !
 SHR SHR SHR SHR BallTileX ! 
;

: SetNewBallPos // x y -->
 DUP NewBallY !
 SHR SHR SHR SHR NewBallTileY !

 DUP NewBallX !
 SHR SHR SHR SHR NewBallTileX !
;

: GoRandom
 4 CHOOSE CASE
  0 OF  0 -1 BREAK
  1 OF  1  0 BREAK
  2 OF  0  1 BREAK
  3 OF -1  0 BREAK
 ENDCASE
 BallDY ! BallDX !
;

: FindJump // JumpNumber --> x y
 GameField[] 1-
 BEGIN
  BEGIN
   1+
  DUP C@ TileJump = UNTIL
  OVER NOT IF 
   NIP // addr
   GameField[] - // fieldIndex
   " I " PRINT DUP .
   DUP FieldWidth MOD
   SWAP FieldWidth /
   EXIT
  ELSE
   SWAP 1- SWAP
  THEN
 AGAIN
;

: GoJump
 JumpsCount @ CHOOSE 
  0 2 GOTOXY " J " PRINT DUP . $
 FindJump // x y
  " X " PRINT OVER . " Y " PRINT DUP . $
 SpriteHeight * 6 + SWAP SpriteWidth * 6 + SWAP SetNewBallPos
 GoRandom 
;

: CenterOfTileActions
 NewBallTileX @ NewBallTileY @ GetTile // tileType

 CASE  
  TileLeftSlashRemovable  OF BallDX @ BallDY @ BallDX ! BallDY ! BREAK
  TileLeftSlash           OF BallDX @ BallDY @ BallDX ! BallDY ! BREAK
  TileRightSlashRemovable OF BallDX @ BallDY @ NEGATE BallDX ! NEGATE BallDY ! BREAK
  TileRightSlash          OF BallDX @ BallDY @ NEGATE BallDX ! NEGATE BallDY ! BREAK
  TileGoBack  OF BallDX @ NEGATE BallDX ! BallDY @ NEGATE BallDY ! BREAK
  TileGoRight OF  1 BallDX !  0 BallDY ! BREAK
  TileGoDown  OF  0 BallDX !  1 BallDY ! BREAK
  TileGoLeft  OF -1 BallDX !  0 BallDY ! BREAK
  TileGoUp    OF  0 BallDX ! -1 BallDY ! BREAK
  TileGoRandom OF GoRandom BREAK
  TileJump OF GoJump BREAK

  TileSpeedUp  OF BallSpeed @ SHL DUP 4 > IF DROP 4 THEN BallSpeed ! BREAK
  TileSlowDown OF BallSpeed @ SHR DUP 1 < IF DROP 1 THEN BallSpeed ! BREAK

  TileGrass OF
   TileSpace BallTileX @ BallTileY @ SetTile
   BREAK

  TileEnergy OF
   TileSpace BallTileX @ BallTileY @ SetTile
   EnergyLeft @ 1 - EnergyLeft !
   BREAK
 ENDCASE  
;

CREATE TilesPassed[] FieldSize ALLOT
: ClearPassedTiles
 0 TilesPassed[] FieldSize CFILL
;
: TilePassed // x y -->
 TileIndex TilesPassed[] + 1 SWAP C!
;
: RedrawPassedTiles
 TilesPassed[]
 FieldHeight 0 DO
  FieldWidth 0 DO
   DUP C@ IF
    I J DrawTile
   THEN
   1+
  LOOP
 LOOP
 DROP
;

: CheckOutOfBorder
 NewBallX @ 0 < IF 
  1 BallDX !
  1 NewBallX !
 THEN

 NewBallX @ FieldPixelWidth 4 - > IF
  -1 BallDX !
  FieldPixelWidth 5 - NewBallX !
 THEN  

 NewBallY @ 0 < IF 
  1 BallDY !
  1 NewBallY !
 THEN

 NewBallY @ FieldPixelHeight 4 - > IF
  -1 BallDY !
  FieldPixelHeight 5 - NewBallY !
 THEN
;

: CheckCollisionWithWall
 NewBallX @ 15 AND 15 = IF // enterign left tile
  NewBallTileX @ NewBallTileY @ GetTile TileWall = IF
   1 BallDX !
   NewBallX @ 2 + NewBallX !
   EXIT
  THEN
 THEN

 NewBallX @ 15 AND 13 = IF // entering right tile
  NewBallTileX @ 1+ NewBallTileY @ GetTile TileWall = IF
   -1 BallDX !
   NewBallX @ 2 - NewBallX !
   EXIT
  THEN
 THEN

 NewBallY @ 15 AND 15 = IF // entering top tile
  NewBallTileX @ NewBallTileY @ GetTile TileWall = IF
   1 BallDY !
   NewBallY @ 2 + NewBallY !
   EXIT
  THEN
 THEN

 NewBallY @ 15 AND 13 = IF // enterign bottom tile
  NewBallTileX @ NewBallTileY @ 1+ GetTile TileWall = IF
   -1 BallDY !
   NewBallY @ 2 - NewBallY !
   EXIT
  THEN
 THEN 
;

: BallInTileCenter? // --> 0|-1
 NewBallX @ 15 AND 6 =
 NewBallY @ 15 AND 6 = AND
;

: GameStep
 BallX @ BallDX @ + BallY @ BallDY @ + SetNewBallPos

 CheckCollisionWithWall

 BallInTileCenter? IF
  CenterOfTileActions
 THEN

 NewBallX @ NewBallY @ SetBallPos

 BallTileX @ BallTileY @ TilePassed
 BallX @ 3 + SHR SHR SHR SHR BallTileY @ TilePassed
 BallTileX @ BallY @ 3 + SHR SHR SHR SHR TilePassed
;

: StartGame
 6 6 SetBallPos
 1 BallDX !
 0 BallDY !
 2 BallSpeed !
 LevelTestRandom
;

: Test
 StartGame
 DrawGameField
 40 0 GOTOXY
 " Jumps = " PRINT JumpsCount @ .
 BEGIN
  ClearPassedTiles
  BallTileX @ BallTileY @ TilePassed
  BallX @ 3 + SHR SHR SHR SHR BallTileY @ TilePassed
  BallTileX @ BallY @ 3 + SHR SHR SHR SHR TilePassed
  BallSpeed @ 0 DO
   GameStep
  LOOP
  RedrawPassedTiles
  DrawBall
  0 0 GOTOXY
  " DEPTH = " PRINT DEPTH . CR
  " ENERGY LEFT = " PRINT EnergyLeft @ . 
  $
 AGAIN
;
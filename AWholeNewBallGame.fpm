" bmp.fpm" L

50 CONSTANT FieldOffsetX
50 CONSTANT FieldOffsetY

30 CONSTANT FieldWidth
18 CONSTANT FieldHeight

16 CONSTANT SpriteWidth
16 CONSTANT SpriteHeight

FieldWidth FieldHeight * CONSTANT FieldSize

FieldWidth SpriteWidth * CONSTANT FieldPixelWidth
FieldHeight SpriteHeight * CONSTANT FieldPixelHeight

CREATE GameField[] FieldSize ALLOT
0 GameField[] FieldSize FILL



VARIABLE BallX
VARIABLE BallY
VARIABLE BallDX
VARIABLE BallDY

VARIABLE NewBallX
VARIABLE NewBallY

VARIABLE BallTileX
VARIABLE BallTileY
VARIABLE NewBallTileX
VARIABLE NewBallTileY

VARIABLE EnergyLeft

0 CONSTANT TileSpace // A
1 CONSTANT TileLeftSlashRemovable // B
2 CONSTANT TileRightSlashRemovable // C
3 CONSTANT TileLeftSlash // D
4 CONSTANT TileRightSlash // E
5 CONSTANT TileGoBack // F
6 CONSTANT TileGoRight // G
7 CONSTANT TileGoDown // H
8 CONSTANT TileGoLeft // I
9 CONSTANT TileGoUp // J
10 CONSTANT TileSpaceBlocked // K
11 CONSTANT TileSlime // L
12 CONSTANT TileGoRandom // M
13 CONSTANT TileJump // N
14 CONSTANT TileSpeedUp // O
15 CONSTANT TileSlowDown // P
16 CONSTANT TileGrass // Q
17 CONSTANT TileEnergy // R
18 CONSTANT TileTrap // S
19 CONSTANT TileWall // T
20 CONSTANT TileEraser // U
21 CONSTANT TileLevelStart // V
22 CONSTANT TilesCount

: TileIndex // x y -> x+y*width
 FieldWidth * + 
;

: SetTile // tileType x y -->
 TileIndex GameField[] + C!
;

: GetTile // x y --> tileType
 OVER FieldWidth U<
 OVER FieldHeight U< AND IF
  TileIndex GameField[] + C@
 ELSE
  DROP DROP TileWall
 THEN
;

CREATE Sprites[] TilesCount CELLS ALLOT
: Sprite, // index --> index+1
 LOAD-BMP OVER 4 * Sprites[] + ! 1+
;
: StartSpriteLoading 0 ;
: EndSpriteLoading DROP ;

StartSpriteLoading
 " bmp/TileSpace.bmp" Sprite,
 " bmp/TileLeftSlashRemovable.bmp" Sprite,
 " bmp/TileRightSlashRemovable.bmp" Sprite,
 " bmp/TileLeftSlash.bmp" Sprite,
 " bmp/TileRightSlash.bmp" Sprite,
 " bmp/TileGoBack.bmp" Sprite,
 " bmp/TileGoRight.bmp" Sprite,
 " bmp/TileGoDown.bmp" Sprite,
 " bmp/TileGoLeft.bmp" Sprite,
 " bmp/TileGoUp.bmp" Sprite,
 " bmp/TileSpaceBlocked.bmp" Sprite,
 " bmp/TileSlime.bmp" Sprite,
 " bmp/TileGoRandom.bmp" Sprite,
 " bmp/TileJump.bmp" Sprite,
 " bmp/TileSpeedUp.bmp" Sprite,
 " bmp/TileSlowDown.bmp" Sprite,
 " bmp/TileGrass.bmp" Sprite,
 " bmp/TileEnergy.bmp" Sprite,
 " bmp/TileTrap.bmp" Sprite,
 " bmp/TileWall.bmp" Sprite,
 " bmp/TileEraser.bmp" Sprite,
 " bmp/TileLevelStart.bmp" Sprite,
EndSpriteLoading

: DrawSprite // x y tileType -->
 Sprites[] SWAP -TH @ 
 ROT ROT // addr x y
 SHOW-BMP
;

: EXIT RDROP ;

: DrawTile // x y -->
 OVER FieldWidth U< 
 OVER FieldHeight U< AND IF
  OVER OVER GetTile Sprites[] SWAP -TH @ // x y SpriteAddr
  ROT SpriteWidth * FieldOffsetX +
  ROT SpriteHeight * FieldOffsetY +
  SHOW-BMP
 ELSE
  DROP DROP
 THEN
;

: DrawBorder
 FieldOffsetX 2 - FieldOffsetY 2 - FieldWidth SpriteWidth * 4 + WHITE HLINE
 FieldOffsetX 1 - FieldOffsetY 1 - FieldWidth SpriteWidth * 2 + WHITE HLINE

 FieldOffsetX 2 - FieldHeight SpriteHeight * FieldOffsetY + 1 + FieldWidth SpriteWidth * 4 + WHITE HLINE
 FieldOffsetX 1 - FieldHeight SpriteHeight * FieldOffsetY +     FieldWidth SpriteWidth * 2 + WHITE HLINE

 FieldOffsetX 2 - FieldOffsetY 2 - FieldHeight SpriteHeight * 4 + WHITE VLINE
 FieldOffsetX 1 - FieldOffsetY 1 - FieldHeight SpriteHeight * 2 + WHITE VLINE

 FieldWidth SpriteWidth * FieldOffsetX + 1 + FieldOffsetY 2 - FieldHeight SpriteHeight * 4 + WHITE VLINE
 FieldWidth SpriteWidth * FieldOffsetX +     FieldOffsetY 1 - FieldHeight SpriteHeight * 2 + WHITE VLINE
;

: DrawField
 FieldHeight 0 DO
  FieldWidth 0 DO
   I J DrawTile
  LOOP
 LOOP
 FieldOffsetX FieldOffsetY TileLevelStart DrawSprite
;

: DrawBall
 FieldOffsetX BallX @ + FieldOffsetY BallY @ +
 4 0 DO
  OVER OVER I + 4 WHITE HLINE
 LOOP
 DROP DROP
;

: DrawGameField
 DrawBorder
 DrawField
 DrawBall
;

: StartFillingGameField 0 EnergyLeft ! GameField[] ;
: EndFillingGameField DROP ;
: Field, // index str --> index+fieldWidth
 DUP IF // not empty string
  OVER // index str index
  BEGIN
   OVER C@ " A" C@ - // index str index tile
   DUP TileEnergy = IF EnergyLeft @ 1+ EnergyLeft ! THEN
   OVER C!
   1+ SWAP 1+ SWAP
  OVER C@ NOT UNTIL
  DROP
 THEN
 DROP
 FieldWidth +
;

: LevelA
 StartFillingGameField
 " AABAAAAAAAAAAABAAAAAAAAAAAAAAA" Field,
 " AABBAAAAAAAAATATAAAAAAAAAAAAAA" Field,
 " AAABBAAAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAABBAAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAABBAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAAABBAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAATTTTTTTTTRTTTTTTTTTAAAAAA" Field,
 " CAAAAARRRRRRRRRRRRRRRRRAAAAAAA" Field,
 " AAAAATTTTTTTTTRTTTTTTTTTAAAAAA" Field,
 " AAAAAAAAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAATRTAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAATATAAAAAAAAAAAAAA" Field,
 " BAAAAAAAAAAAAACAAAAAAAAAAAAAAA" Field,
 EndFillingGameField
;

: LevelTest
 StartFillingGameField
 " BBAAAAAAAAAAAAAAAACCAAAAAAAAAA" Field,
 " ABBAAAAAACBAAAAAACCAAAAAAAAAAA" Field,
 " AABBAAAACCBBAAAACCAAAAAAAAAAAA" Field,
 " AAABBAACCAABBAACCAAAAAAAAAAAAA" Field,
 " AAAABBCCAAAABBCCAAAAAAAAAAAAAA" Field,
 " AAAAABCAAAAAABCAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 " AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" Field,
 EndFillingGameField
;

: CenterOfTileActions
 NewBallTileX @ NewBallTileY @ GetTile // tileType

 DUP TileLeftSlashRemovable = OVER TileLeftSlash = OR IF
  BallDX @ BallDY @ BallDX ! BallDY !
 THEN 

 DUP TileRightSlashRemovable = OVER TileRightSlash = OR IF
  BallDX @ BallDY @ NEGATE BallDX ! NEGATE BallDY !
 THEN 

 DUP TileEnergy = IF
  TileSpace BallTileX @ BallTileY @ SetTile
  EnergyLeft @ 1 - EnergyLeft !
 THEN

 DROP
;

CREATE TilesPassed[] FieldSize ALLOT
: ClearPassedTiles
 0 TilesPassed[] FieldSize FILL
;
: TilePassed // x y -->
 TileIndex TilesPassed[] + 1 SWAP C!
;
: RedrawPassedTiles
 TilesPassed[]
 FieldHeight 0 DO
  FieldWidth 0 DO
   DUP C@ IF
    I J DrawTile
   THEN
   1+
  LOOP
 LOOP
 DROP
;

: CheckOutOfBorder
 NewBallX @ 0 < IF 
  1 BallDX !
  1 NewBallX !
 THEN

 NewBallX @ FieldPixelWidth 4 - > IF
  -1 BallDX !
  FieldPixelWidth 5 - NewBallX !
 THEN  

 NewBallY @ 0 < IF 
  1 BallDY !
  1 NewBallY !
 THEN

 NewBallY @ FieldPixelHeight 4 - > IF
  -1 BallDY !
  FieldPixelHeight 5 - NewBallY !
 THEN
;

: BallInTileCenter? // --> 0|-1
 NewBallX @ 15 AND 6 =
 NewBallY @ 15 AND 6 = AND
;

: GameStep
 BallX @ BallDX @ + 
  DUP NewBallX !
  SHR SHR SHR SHR NewBallTileX !

 BallY @ BallDY @ + 
  DUP NewBallY !
  SHR SHR SHR SHR NewBallTileY !

 NewBallX @ 15 AND 15 = IF
  NewBallTileX @ NewBallTileY @ GetTile TileWall = IF
   1 BallDX !
   NewBallX @ 2 + NewBallX !
  THEN
 THEN

 NewBallX @ 15 AND 13 = IF
  NewBallTileX @ 1+ NewBallTileY @ GetTile TileWall = IF
   -1 BallDX !
   NewBallX @ 2 - NewBallX !
  THEN
 THEN

 NewBallY @ 15 AND 15 = IF
  NewBallTileX @ NewBallTileY @ GetTile TileWall = IF
   1 BallDY !
   NewBallY @ 2 + NewBallY !
  THEN
 THEN

 NewBallY @ 15 AND 13 = IF
  NewBallTileX @ NewBallTileY @ 1+ GetTile TileWall = IF
   -1 BallDY !
   NewBallY @ 2 - NewBallY !
  THEN
 THEN

 BallInTileCenter? IF
  CenterOfTileActions
 THEN

 NewBallX @ 
  DUP BallX !
  SHR SHR SHR SHR BallTileX !

 NewBallY @ 
  DUP BallY !
  SHR SHR SHR SHR BallTileY !

 BallTileX @ BallTileY @ TilePassed
 BallX @ 3 + SHR SHR SHR SHR BallTileY @ TilePassed
 BallTileX @ BallY @ 3 + SHR SHR SHR SHR TilePassed
;

: StartGame
 6 BallX !
 6 BallY !
 0 BallTileX !
 0 BallTileY !
 1 BallDX !
 0 BallDY !
 LevelTest
;

: Test
 StartGame
 DrawGameField
 BEGIN
  ClearPassedTiles
  BallTileX @ BallTileY @ TilePassed
  2 0 DO
   GameStep
  LOOP
  RedrawPassedTiles
  DrawBall
  0 0 GOTOXY
  " DEPTH = " PRINT DEPTH . CR
  " ENERGY LEFT = " PRINT EnergyLeft @ . 
  $
 AGAIN
;